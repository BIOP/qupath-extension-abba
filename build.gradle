plugins {
    id 'java-library'
    id 'maven-publish'
    alias(libs.plugins.javafx)

}

repositories {
    // Use this only for local development!
    mavenLocal()

    maven{
        url "https://maven.scijava.org/content/repositories/releases"
    }

    mavenCentral()

    maven {
        url "https://maven.scijava.org/content/repositories/snapshots"
    }
}

ext.qupathVersion = gradle.ext.qupathVersion

ext.moduleName =  "qupath.extension.abba"

description = "QuPath extension to use Aligning Big Brain and Atlases"

group = "ch.epfl.biop"
version = "0.3.0-SNAPSHOT"

dependencies {
    implementation("io.github.qupath:qupath-gui-fx:$qupathVersion")
    implementation libs.bundles.logging
    implementation("commons-io:commons-io:2.11.0")
    implementation("net.imglib2:imglib2-realtransform:3.1.2")
    implementation("qupath.ext.warpy:qupath-extension-warpy:0.3.0")
    implementation libs.qupath.fxtras
}
tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the output libs directory"
    group "QuPath"

    from configurations.default
    into 'build/libs'
}

/*
 * Ensure Java 11 compatibility
 */
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    if ("sources" in project.properties)
        withSourcesJar()
    if ("javadocs" in project.properties)
        withJavadocJar()
}

jar {
    // Important to set version so this can be queried within QuPath
    manifest {
        def manifestAttributes = [
                "Implementation-Vendor": "QuPath developers",
                "Implementation-Version": project.version,
                //'Automatic-Module-Name': group+ "." + moduleName,
                "QuPath-build-time": new Date().format("yyyy-MM-dd, HH:mm")
        ]
        attributes(manifestAttributes)
    }
}

tasks.test { useJUnitPlatform() }

publishing {

    repositories {
        maven {
            name = "scijava"
            //credentials(PasswordCredentials::class)
            if (version.toString().endsWith("SNAPSHOT")) {
                url = uri("https://maven.scijava.org/content/repositories/snapshots")
            } else {
                url = uri("https://maven.scijava.org/content/repositories/releases")
            }
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASS")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                licenses {
                    license {
                        name = 'GNU General Public License, Version 3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
            }
        }
    }
}